/*
 * Respondent User Profile Basic Information API
 * Respondent User Profile Basic Information API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@eoc.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.57
 *
 * Do not edit the class manually.
 *
 */
import RespondentBasicDataApiClient from '../RespondentBasicDataApiClient'
import Error from '../model/Error'
import NewRespondentBasicData from '../model/NewRespondentBasicData'
import RespondentBasicData from '../model/RespondentBasicData'

/**
 * RespondentBasicData service.
 * @module api/RespondentBasicDataApi
 * @version 1.0.0
 */
export default class RespondentBasicDataApi {
  /**
    * Constructs a new RespondentBasicDataApi.
    * @alias module:api/RespondentBasicDataApi
    * @class
    * @param {module:RespondentBasicDataApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:RespondentBasicDataApiClient#instance
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || RespondentBasicDataApiClient.instance
  }

  /**
   * Callback function to receive the result of the addRespondentBasicData operation.
   * @callback moduleapi/RespondentBasicDataApi~addRespondentBasicDataCallback
   * @param {String} error Error message, if any.
   * @param {module:model/RespondentBasicData{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Creates a new RespondentBasicData in the store.  Duplicates are not allowed
   * Creates a new RespondentBasicData in the store.  Duplicates are not allowed
   * @param {module:model/NewRespondentBasicData} body RespondentBasicData to add to the store
   * @param {module:api/RespondentBasicDataApi~addRespondentBasicDataCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  addRespondentBasicData(body, callback) {
    let postBody = body
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling addRespondentBasicData")
    }

    let pathParams = {}
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['bearerAuth']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = RespondentBasicData

    return this.apiClient.callApi(
      '/basic-info',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the deleteRespondentBasicData operation.
   * @callback moduleapi/RespondentBasicDataApi~deleteRespondentBasicDataCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * deletes a single RespondentBasicData based on the ID supplied
   * deletes a single RespondentBasicData based on the ID supplied
   * @param {String} id ID of RespondentBasicData to delete
   * @param {module:api/RespondentBasicDataApi~deleteRespondentBasicDataCallback} callback The callback function, accepting three arguments: error, data, response
   */
  deleteRespondentBasicData(id, callback) {
    let postBody = null
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteRespondentBasicData")
    }

    let pathParams = {
      id: id
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['bearerAuth']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = null

    return this.apiClient.callApi(
      '/basic-info/{id}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the findRespondentBasicData operation.
   * @callback moduleapi/RespondentBasicDataApi~findRespondentBasicDataCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/RespondentBasicData>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns all RespondentBasicData from the system that the user has access to
   * Returns all RespondentBasicData from the system that the user has access to
   * @param {Number} page Page number
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.isCompleted Filter by completed flag
   * @param {module:api/RespondentBasicDataApi~findRespondentBasicDataCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  findRespondentBasicData(page, opts, callback) {
    opts = opts || {}
    let postBody = null
    // verify the required parameter 'page' is set
    if (page === undefined || page === null) {
      throw new Error("Missing the required parameter 'page' when calling findRespondentBasicData")
    }

    let pathParams = {}
    let queryParams = {
      page: page,
      isCompleted: opts['isCompleted']
    }
    let headerParams = {}
    let formParams = {}

    let authNames = ['bearerAuth']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = [RespondentBasicData]

    return this.apiClient.callApi(
      '/basic-info',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the findRespondentBasicDataById operation.
   * @callback moduleapi/RespondentBasicDataApi~findRespondentBasicDataByIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/RespondentBasicData{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns a RespondentBasicData based on a single ID
   * Returns a RespondentBasicData based on a single ID
   * @param {String} id ID of RespondentBasicData to fetch
   * @param {module:api/RespondentBasicDataApi~findRespondentBasicDataByIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  findRespondentBasicDataById(id, callback) {
    let postBody = null
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findRespondentBasicDataById")
    }

    let pathParams = {
      id: id
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['bearerAuth']
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = RespondentBasicData

    return this.apiClient.callApi(
      '/basic-info/{id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
  /**
   * Callback function to receive the result of the updateRespondentBasicData operation.
   * @callback moduleapi/RespondentBasicDataApi~updateRespondentBasicDataCallback
   * @param {String} error Error message, if any.
   * @param {module:model/RespondentBasicData{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update RespondentBasicData in the store based on a single ID
   * Update RespondentBasicData in the store based on a single ID
   * @param {module:model/NewRespondentBasicData} body RespondentBasicData to add to the store
   * @param {String} id ID of RespondentBasicData to update
   * @param {module:api/RespondentBasicDataApi~updateRespondentBasicDataCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  updateRespondentBasicData(body, id, callback) {
    let postBody = body
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateRespondentBasicData")
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateRespondentBasicData")
    }

    let pathParams = {
      id: id
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = ['bearerAuth']
    let contentTypes = ['application/json']
    let accepts = ['application/json']
    let returnType = RespondentBasicData

    return this.apiClient.callApi(
      '/basic-info/{id}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    )
  }
}
